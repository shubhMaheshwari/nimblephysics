/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: GUI.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace dart.proto {
    export class CommandList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            command?: Command[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("command" in data && data.command != undefined) {
                    this.command = data.command;
                }
            }
        }
        get command() {
            return pb_1.Message.getRepeatedWrapperField(this, Command, 1) as Command[];
        }
        set command(value: Command[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            command?: ReturnType<typeof Command.prototype.toObject>[];
        }): CommandList {
            const message = new CommandList({});
            if (data.command != null) {
                message.command = data.command.map(item => Command.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                command?: ReturnType<typeof Command.prototype.toObject>[];
            } = {};
            if (this.command != null) {
                data.command = this.command.map((item: Command) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.command.length)
                writer.writeRepeatedMessage(1, this.command, (item: Command) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommandList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommandList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.command, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Command.deserialize(reader), Command));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CommandList {
            return CommandList.deserialize(bytes);
        }
    }
    export class Command extends pb_1.Message {
        #one_of_decls: number[][] = [[31, 16, 1, 2, 9, 36, 35, 10, 11, 3, 4, 5, 6, 7, 8, 32, 33, 38, 37, 39, 18, 34, 12, 13, 14, 15, 29, 17, 30, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 40]];
        constructor(data?: any[] | ({} & (({
            set_frames_per_second?: SetFramesPerSecond;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: ClearAll;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: CreateLayer;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: CreateBox;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: CreateSphere;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: CreateCone;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: CreateCylinder;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: CreateCapsule;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: CreateLine;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: CreateMesh;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: CreateTexture;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: SetObjectPosition;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: SetObjectRotation;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: SetObjectColor;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: SetObjectScale;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: SetObjectTooltip;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: DeleteObjectTooltip;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: SetSpanWarning;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: SetObjectWarning;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: DeleteObjectWarning;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: EnableDrag;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: EnableEditTooltip;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: CreateText;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: CreateButton;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: CreateSlider;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: CreatePlot;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: CreateRichPlot;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: SetRichPlotData;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: SetRichPlotBounds;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: SetUIElemPos;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: SetUIElemSize;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: DeleteUIElem;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: DeleteObject;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: SetTextContents;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: SetButtonLabel;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: SetSliderValue;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: SetSliderMin;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: SetSliderMax;
            set_plot_data?: never;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: SetPlotData;
            dropdown?: never;
        } | {
            set_frames_per_second?: never;
            clear_all?: never;
            layer?: never;
            box?: never;
            sphere?: never;
            cone?: never;
            cylinder?: never;
            capsule?: never;
            line?: never;
            mesh?: never;
            texture?: never;
            set_object_position?: never;
            set_object_rotation?: never;
            set_object_color?: never;
            set_object_scale?: never;
            set_object_tooltip?: never;
            delete_object_tooltip?: never;
            set_span_warning?: never;
            set_object_warning?: never;
            delete_object_warning?: never;
            enable_drag?: never;
            enable_edit_tooltip?: never;
            text?: never;
            button?: never;
            slider?: never;
            plot?: never;
            rich_plot?: never;
            set_rich_plot_data?: never;
            set_rich_plot_bounds?: never;
            set_ui_elem_pos?: never;
            set_ui_elem_size?: never;
            delete_ui_elem?: never;
            delete_object?: never;
            set_text_contents?: never;
            set_button_label?: never;
            set_slider_value?: never;
            set_slider_min?: never;
            set_slider_max?: never;
            set_plot_data?: never;
            dropdown?: Dropdown;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("set_frames_per_second" in data && data.set_frames_per_second != undefined) {
                    this.set_frames_per_second = data.set_frames_per_second;
                }
                if ("clear_all" in data && data.clear_all != undefined) {
                    this.clear_all = data.clear_all;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("box" in data && data.box != undefined) {
                    this.box = data.box;
                }
                if ("sphere" in data && data.sphere != undefined) {
                    this.sphere = data.sphere;
                }
                if ("cone" in data && data.cone != undefined) {
                    this.cone = data.cone;
                }
                if ("cylinder" in data && data.cylinder != undefined) {
                    this.cylinder = data.cylinder;
                }
                if ("capsule" in data && data.capsule != undefined) {
                    this.capsule = data.capsule;
                }
                if ("line" in data && data.line != undefined) {
                    this.line = data.line;
                }
                if ("mesh" in data && data.mesh != undefined) {
                    this.mesh = data.mesh;
                }
                if ("texture" in data && data.texture != undefined) {
                    this.texture = data.texture;
                }
                if ("set_object_position" in data && data.set_object_position != undefined) {
                    this.set_object_position = data.set_object_position;
                }
                if ("set_object_rotation" in data && data.set_object_rotation != undefined) {
                    this.set_object_rotation = data.set_object_rotation;
                }
                if ("set_object_color" in data && data.set_object_color != undefined) {
                    this.set_object_color = data.set_object_color;
                }
                if ("set_object_scale" in data && data.set_object_scale != undefined) {
                    this.set_object_scale = data.set_object_scale;
                }
                if ("set_object_tooltip" in data && data.set_object_tooltip != undefined) {
                    this.set_object_tooltip = data.set_object_tooltip;
                }
                if ("delete_object_tooltip" in data && data.delete_object_tooltip != undefined) {
                    this.delete_object_tooltip = data.delete_object_tooltip;
                }
                if ("set_span_warning" in data && data.set_span_warning != undefined) {
                    this.set_span_warning = data.set_span_warning;
                }
                if ("set_object_warning" in data && data.set_object_warning != undefined) {
                    this.set_object_warning = data.set_object_warning;
                }
                if ("delete_object_warning" in data && data.delete_object_warning != undefined) {
                    this.delete_object_warning = data.delete_object_warning;
                }
                if ("enable_drag" in data && data.enable_drag != undefined) {
                    this.enable_drag = data.enable_drag;
                }
                if ("enable_edit_tooltip" in data && data.enable_edit_tooltip != undefined) {
                    this.enable_edit_tooltip = data.enable_edit_tooltip;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("button" in data && data.button != undefined) {
                    this.button = data.button;
                }
                if ("slider" in data && data.slider != undefined) {
                    this.slider = data.slider;
                }
                if ("plot" in data && data.plot != undefined) {
                    this.plot = data.plot;
                }
                if ("rich_plot" in data && data.rich_plot != undefined) {
                    this.rich_plot = data.rich_plot;
                }
                if ("set_rich_plot_data" in data && data.set_rich_plot_data != undefined) {
                    this.set_rich_plot_data = data.set_rich_plot_data;
                }
                if ("set_rich_plot_bounds" in data && data.set_rich_plot_bounds != undefined) {
                    this.set_rich_plot_bounds = data.set_rich_plot_bounds;
                }
                if ("set_ui_elem_pos" in data && data.set_ui_elem_pos != undefined) {
                    this.set_ui_elem_pos = data.set_ui_elem_pos;
                }
                if ("set_ui_elem_size" in data && data.set_ui_elem_size != undefined) {
                    this.set_ui_elem_size = data.set_ui_elem_size;
                }
                if ("delete_ui_elem" in data && data.delete_ui_elem != undefined) {
                    this.delete_ui_elem = data.delete_ui_elem;
                }
                if ("delete_object" in data && data.delete_object != undefined) {
                    this.delete_object = data.delete_object;
                }
                if ("set_text_contents" in data && data.set_text_contents != undefined) {
                    this.set_text_contents = data.set_text_contents;
                }
                if ("set_button_label" in data && data.set_button_label != undefined) {
                    this.set_button_label = data.set_button_label;
                }
                if ("set_slider_value" in data && data.set_slider_value != undefined) {
                    this.set_slider_value = data.set_slider_value;
                }
                if ("set_slider_min" in data && data.set_slider_min != undefined) {
                    this.set_slider_min = data.set_slider_min;
                }
                if ("set_slider_max" in data && data.set_slider_max != undefined) {
                    this.set_slider_max = data.set_slider_max;
                }
                if ("set_plot_data" in data && data.set_plot_data != undefined) {
                    this.set_plot_data = data.set_plot_data;
                }
                if ("dropdown" in data && data.dropdown != undefined) {
                    this.dropdown = data.dropdown;
                }
            }
        }
        get set_frames_per_second() {
            return pb_1.Message.getWrapperField(this, SetFramesPerSecond, 31) as SetFramesPerSecond;
        }
        set set_frames_per_second(value: SetFramesPerSecond) {
            pb_1.Message.setOneofWrapperField(this, 31, this.#one_of_decls[0], value);
        }
        get has_set_frames_per_second() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get clear_all() {
            return pb_1.Message.getWrapperField(this, ClearAll, 16) as ClearAll;
        }
        set clear_all(value: ClearAll) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_clear_all() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get layer() {
            return pb_1.Message.getWrapperField(this, CreateLayer, 1) as CreateLayer;
        }
        set layer(value: CreateLayer) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_layer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get box() {
            return pb_1.Message.getWrapperField(this, CreateBox, 2) as CreateBox;
        }
        set box(value: CreateBox) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_box() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sphere() {
            return pb_1.Message.getWrapperField(this, CreateSphere, 9) as CreateSphere;
        }
        set sphere(value: CreateSphere) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_sphere() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get cone() {
            return pb_1.Message.getWrapperField(this, CreateCone, 36) as CreateCone;
        }
        set cone(value: CreateCone) {
            pb_1.Message.setOneofWrapperField(this, 36, this.#one_of_decls[0], value);
        }
        get has_cone() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get cylinder() {
            return pb_1.Message.getWrapperField(this, CreateCylinder, 35) as CreateCylinder;
        }
        set cylinder(value: CreateCylinder) {
            pb_1.Message.setOneofWrapperField(this, 35, this.#one_of_decls[0], value);
        }
        get has_cylinder() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get capsule() {
            return pb_1.Message.getWrapperField(this, CreateCapsule, 10) as CreateCapsule;
        }
        set capsule(value: CreateCapsule) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_capsule() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get line() {
            return pb_1.Message.getWrapperField(this, CreateLine, 11) as CreateLine;
        }
        set line(value: CreateLine) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_line() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get mesh() {
            return pb_1.Message.getWrapperField(this, CreateMesh, 3) as CreateMesh;
        }
        set mesh(value: CreateMesh) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_mesh() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get texture() {
            return pb_1.Message.getWrapperField(this, CreateTexture, 4) as CreateTexture;
        }
        set texture(value: CreateTexture) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_texture() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get set_object_position() {
            return pb_1.Message.getWrapperField(this, SetObjectPosition, 5) as SetObjectPosition;
        }
        set set_object_position(value: SetObjectPosition) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_set_object_position() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get set_object_rotation() {
            return pb_1.Message.getWrapperField(this, SetObjectRotation, 6) as SetObjectRotation;
        }
        set set_object_rotation(value: SetObjectRotation) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_set_object_rotation() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get set_object_color() {
            return pb_1.Message.getWrapperField(this, SetObjectColor, 7) as SetObjectColor;
        }
        set set_object_color(value: SetObjectColor) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_set_object_color() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get set_object_scale() {
            return pb_1.Message.getWrapperField(this, SetObjectScale, 8) as SetObjectScale;
        }
        set set_object_scale(value: SetObjectScale) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_set_object_scale() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get set_object_tooltip() {
            return pb_1.Message.getWrapperField(this, SetObjectTooltip, 32) as SetObjectTooltip;
        }
        set set_object_tooltip(value: SetObjectTooltip) {
            pb_1.Message.setOneofWrapperField(this, 32, this.#one_of_decls[0], value);
        }
        get has_set_object_tooltip() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get delete_object_tooltip() {
            return pb_1.Message.getWrapperField(this, DeleteObjectTooltip, 33) as DeleteObjectTooltip;
        }
        set delete_object_tooltip(value: DeleteObjectTooltip) {
            pb_1.Message.setOneofWrapperField(this, 33, this.#one_of_decls[0], value);
        }
        get has_delete_object_tooltip() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get set_span_warning() {
            return pb_1.Message.getWrapperField(this, SetSpanWarning, 38) as SetSpanWarning;
        }
        set set_span_warning(value: SetSpanWarning) {
            pb_1.Message.setOneofWrapperField(this, 38, this.#one_of_decls[0], value);
        }
        get has_set_span_warning() {
            return pb_1.Message.getField(this, 38) != null;
        }
        get set_object_warning() {
            return pb_1.Message.getWrapperField(this, SetObjectWarning, 37) as SetObjectWarning;
        }
        set set_object_warning(value: SetObjectWarning) {
            pb_1.Message.setOneofWrapperField(this, 37, this.#one_of_decls[0], value);
        }
        get has_set_object_warning() {
            return pb_1.Message.getField(this, 37) != null;
        }
        get delete_object_warning() {
            return pb_1.Message.getWrapperField(this, DeleteObjectWarning, 39) as DeleteObjectWarning;
        }
        set delete_object_warning(value: DeleteObjectWarning) {
            pb_1.Message.setOneofWrapperField(this, 39, this.#one_of_decls[0], value);
        }
        get has_delete_object_warning() {
            return pb_1.Message.getField(this, 39) != null;
        }
        get enable_drag() {
            return pb_1.Message.getWrapperField(this, EnableDrag, 18) as EnableDrag;
        }
        set enable_drag(value: EnableDrag) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_enable_drag() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get enable_edit_tooltip() {
            return pb_1.Message.getWrapperField(this, EnableEditTooltip, 34) as EnableEditTooltip;
        }
        set enable_edit_tooltip(value: EnableEditTooltip) {
            pb_1.Message.setOneofWrapperField(this, 34, this.#one_of_decls[0], value);
        }
        get has_enable_edit_tooltip() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get text() {
            return pb_1.Message.getWrapperField(this, CreateText, 12) as CreateText;
        }
        set text(value: CreateText) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_text() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get button() {
            return pb_1.Message.getWrapperField(this, CreateButton, 13) as CreateButton;
        }
        set button(value: CreateButton) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_button() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get slider() {
            return pb_1.Message.getWrapperField(this, CreateSlider, 14) as CreateSlider;
        }
        set slider(value: CreateSlider) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_slider() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get plot() {
            return pb_1.Message.getWrapperField(this, CreatePlot, 15) as CreatePlot;
        }
        set plot(value: CreatePlot) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_plot() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get rich_plot() {
            return pb_1.Message.getWrapperField(this, CreateRichPlot, 29) as CreateRichPlot;
        }
        set rich_plot(value: CreateRichPlot) {
            pb_1.Message.setOneofWrapperField(this, 29, this.#one_of_decls[0], value);
        }
        get has_rich_plot() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get set_rich_plot_data() {
            return pb_1.Message.getWrapperField(this, SetRichPlotData, 17) as SetRichPlotData;
        }
        set set_rich_plot_data(value: SetRichPlotData) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_set_rich_plot_data() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get set_rich_plot_bounds() {
            return pb_1.Message.getWrapperField(this, SetRichPlotBounds, 30) as SetRichPlotBounds;
        }
        set set_rich_plot_bounds(value: SetRichPlotBounds) {
            pb_1.Message.setOneofWrapperField(this, 30, this.#one_of_decls[0], value);
        }
        get has_set_rich_plot_bounds() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get set_ui_elem_pos() {
            return pb_1.Message.getWrapperField(this, SetUIElemPos, 19) as SetUIElemPos;
        }
        set set_ui_elem_pos(value: SetUIElemPos) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_set_ui_elem_pos() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get set_ui_elem_size() {
            return pb_1.Message.getWrapperField(this, SetUIElemSize, 20) as SetUIElemSize;
        }
        set set_ui_elem_size(value: SetUIElemSize) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_set_ui_elem_size() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get delete_ui_elem() {
            return pb_1.Message.getWrapperField(this, DeleteUIElem, 21) as DeleteUIElem;
        }
        set delete_ui_elem(value: DeleteUIElem) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_delete_ui_elem() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get delete_object() {
            return pb_1.Message.getWrapperField(this, DeleteObject, 22) as DeleteObject;
        }
        set delete_object(value: DeleteObject) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_delete_object() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get set_text_contents() {
            return pb_1.Message.getWrapperField(this, SetTextContents, 23) as SetTextContents;
        }
        set set_text_contents(value: SetTextContents) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_set_text_contents() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get set_button_label() {
            return pb_1.Message.getWrapperField(this, SetButtonLabel, 24) as SetButtonLabel;
        }
        set set_button_label(value: SetButtonLabel) {
            pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
        }
        get has_set_button_label() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get set_slider_value() {
            return pb_1.Message.getWrapperField(this, SetSliderValue, 25) as SetSliderValue;
        }
        set set_slider_value(value: SetSliderValue) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_set_slider_value() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get set_slider_min() {
            return pb_1.Message.getWrapperField(this, SetSliderMin, 26) as SetSliderMin;
        }
        set set_slider_min(value: SetSliderMin) {
            pb_1.Message.setOneofWrapperField(this, 26, this.#one_of_decls[0], value);
        }
        get has_set_slider_min() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get set_slider_max() {
            return pb_1.Message.getWrapperField(this, SetSliderMax, 27) as SetSliderMax;
        }
        set set_slider_max(value: SetSliderMax) {
            pb_1.Message.setOneofWrapperField(this, 27, this.#one_of_decls[0], value);
        }
        get has_set_slider_max() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get set_plot_data() {
            return pb_1.Message.getWrapperField(this, SetPlotData, 28) as SetPlotData;
        }
        set set_plot_data(value: SetPlotData) {
            pb_1.Message.setOneofWrapperField(this, 28, this.#one_of_decls[0], value);
        }
        get has_set_plot_data() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get dropdown() {
            return pb_1.Message.getWrapperField(this, Dropdown, 40) as Dropdown;
        }
        set dropdown(value: Dropdown) {
            pb_1.Message.setOneofWrapperField(this, 40, this.#one_of_decls[0], value);
        }
        get has_dropdown() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get command() {
            const cases: {
                [index: number]: "none" | "set_frames_per_second" | "clear_all" | "layer" | "box" | "sphere" | "cone" | "cylinder" | "capsule" | "line" | "mesh" | "texture" | "set_object_position" | "set_object_rotation" | "set_object_color" | "set_object_scale" | "set_object_tooltip" | "delete_object_tooltip" | "set_span_warning" | "set_object_warning" | "delete_object_warning" | "enable_drag" | "enable_edit_tooltip" | "text" | "button" | "slider" | "plot" | "rich_plot" | "set_rich_plot_data" | "set_rich_plot_bounds" | "set_ui_elem_pos" | "set_ui_elem_size" | "delete_ui_elem" | "delete_object" | "set_text_contents" | "set_button_label" | "set_slider_value" | "set_slider_min" | "set_slider_max" | "set_plot_data" | "dropdown";
            } = {
                0: "none",
                31: "set_frames_per_second",
                16: "clear_all",
                1: "layer",
                2: "box",
                9: "sphere",
                36: "cone",
                35: "cylinder",
                10: "capsule",
                11: "line",
                3: "mesh",
                4: "texture",
                5: "set_object_position",
                6: "set_object_rotation",
                7: "set_object_color",
                8: "set_object_scale",
                32: "set_object_tooltip",
                33: "delete_object_tooltip",
                38: "set_span_warning",
                37: "set_object_warning",
                39: "delete_object_warning",
                18: "enable_drag",
                34: "enable_edit_tooltip",
                12: "text",
                13: "button",
                14: "slider",
                15: "plot",
                29: "rich_plot",
                17: "set_rich_plot_data",
                30: "set_rich_plot_bounds",
                19: "set_ui_elem_pos",
                20: "set_ui_elem_size",
                21: "delete_ui_elem",
                22: "delete_object",
                23: "set_text_contents",
                24: "set_button_label",
                25: "set_slider_value",
                26: "set_slider_min",
                27: "set_slider_max",
                28: "set_plot_data",
                40: "dropdown"
            };
            return cases[pb_1.Message.computeOneofCase(this, [31, 16, 1, 2, 9, 36, 35, 10, 11, 3, 4, 5, 6, 7, 8, 32, 33, 38, 37, 39, 18, 34, 12, 13, 14, 15, 29, 17, 30, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 40])];
        }
        static fromObject(data: {
            set_frames_per_second?: ReturnType<typeof SetFramesPerSecond.prototype.toObject>;
            clear_all?: ReturnType<typeof ClearAll.prototype.toObject>;
            layer?: ReturnType<typeof CreateLayer.prototype.toObject>;
            box?: ReturnType<typeof CreateBox.prototype.toObject>;
            sphere?: ReturnType<typeof CreateSphere.prototype.toObject>;
            cone?: ReturnType<typeof CreateCone.prototype.toObject>;
            cylinder?: ReturnType<typeof CreateCylinder.prototype.toObject>;
            capsule?: ReturnType<typeof CreateCapsule.prototype.toObject>;
            line?: ReturnType<typeof CreateLine.prototype.toObject>;
            mesh?: ReturnType<typeof CreateMesh.prototype.toObject>;
            texture?: ReturnType<typeof CreateTexture.prototype.toObject>;
            set_object_position?: ReturnType<typeof SetObjectPosition.prototype.toObject>;
            set_object_rotation?: ReturnType<typeof SetObjectRotation.prototype.toObject>;
            set_object_color?: ReturnType<typeof SetObjectColor.prototype.toObject>;
            set_object_scale?: ReturnType<typeof SetObjectScale.prototype.toObject>;
            set_object_tooltip?: ReturnType<typeof SetObjectTooltip.prototype.toObject>;
            delete_object_tooltip?: ReturnType<typeof DeleteObjectTooltip.prototype.toObject>;
            set_span_warning?: ReturnType<typeof SetSpanWarning.prototype.toObject>;
            set_object_warning?: ReturnType<typeof SetObjectWarning.prototype.toObject>;
            delete_object_warning?: ReturnType<typeof DeleteObjectWarning.prototype.toObject>;
            enable_drag?: ReturnType<typeof EnableDrag.prototype.toObject>;
            enable_edit_tooltip?: ReturnType<typeof EnableEditTooltip.prototype.toObject>;
            text?: ReturnType<typeof CreateText.prototype.toObject>;
            button?: ReturnType<typeof CreateButton.prototype.toObject>;
            slider?: ReturnType<typeof CreateSlider.prototype.toObject>;
            plot?: ReturnType<typeof CreatePlot.prototype.toObject>;
            rich_plot?: ReturnType<typeof CreateRichPlot.prototype.toObject>;
            set_rich_plot_data?: ReturnType<typeof SetRichPlotData.prototype.toObject>;
            set_rich_plot_bounds?: ReturnType<typeof SetRichPlotBounds.prototype.toObject>;
            set_ui_elem_pos?: ReturnType<typeof SetUIElemPos.prototype.toObject>;
            set_ui_elem_size?: ReturnType<typeof SetUIElemSize.prototype.toObject>;
            delete_ui_elem?: ReturnType<typeof DeleteUIElem.prototype.toObject>;
            delete_object?: ReturnType<typeof DeleteObject.prototype.toObject>;
            set_text_contents?: ReturnType<typeof SetTextContents.prototype.toObject>;
            set_button_label?: ReturnType<typeof SetButtonLabel.prototype.toObject>;
            set_slider_value?: ReturnType<typeof SetSliderValue.prototype.toObject>;
            set_slider_min?: ReturnType<typeof SetSliderMin.prototype.toObject>;
            set_slider_max?: ReturnType<typeof SetSliderMax.prototype.toObject>;
            set_plot_data?: ReturnType<typeof SetPlotData.prototype.toObject>;
            dropdown?: ReturnType<typeof Dropdown.prototype.toObject>;
        }): Command {
            const message = new Command({});
            if (data.set_frames_per_second != null) {
                message.set_frames_per_second = SetFramesPerSecond.fromObject(data.set_frames_per_second);
            }
            if (data.clear_all != null) {
                message.clear_all = ClearAll.fromObject(data.clear_all);
            }
            if (data.layer != null) {
                message.layer = CreateLayer.fromObject(data.layer);
            }
            if (data.box != null) {
                message.box = CreateBox.fromObject(data.box);
            }
            if (data.sphere != null) {
                message.sphere = CreateSphere.fromObject(data.sphere);
            }
            if (data.cone != null) {
                message.cone = CreateCone.fromObject(data.cone);
            }
            if (data.cylinder != null) {
                message.cylinder = CreateCylinder.fromObject(data.cylinder);
            }
            if (data.capsule != null) {
                message.capsule = CreateCapsule.fromObject(data.capsule);
            }
            if (data.line != null) {
                message.line = CreateLine.fromObject(data.line);
            }
            if (data.mesh != null) {
                message.mesh = CreateMesh.fromObject(data.mesh);
            }
            if (data.texture != null) {
                message.texture = CreateTexture.fromObject(data.texture);
            }
            if (data.set_object_position != null) {
                message.set_object_position = SetObjectPosition.fromObject(data.set_object_position);
            }
            if (data.set_object_rotation != null) {
                message.set_object_rotation = SetObjectRotation.fromObject(data.set_object_rotation);
            }
            if (data.set_object_color != null) {
                message.set_object_color = SetObjectColor.fromObject(data.set_object_color);
            }
            if (data.set_object_scale != null) {
                message.set_object_scale = SetObjectScale.fromObject(data.set_object_scale);
            }
            if (data.set_object_tooltip != null) {
                message.set_object_tooltip = SetObjectTooltip.fromObject(data.set_object_tooltip);
            }
            if (data.delete_object_tooltip != null) {
                message.delete_object_tooltip = DeleteObjectTooltip.fromObject(data.delete_object_tooltip);
            }
            if (data.set_span_warning != null) {
                message.set_span_warning = SetSpanWarning.fromObject(data.set_span_warning);
            }
            if (data.set_object_warning != null) {
                message.set_object_warning = SetObjectWarning.fromObject(data.set_object_warning);
            }
            if (data.delete_object_warning != null) {
                message.delete_object_warning = DeleteObjectWarning.fromObject(data.delete_object_warning);
            }
            if (data.enable_drag != null) {
                message.enable_drag = EnableDrag.fromObject(data.enable_drag);
            }
            if (data.enable_edit_tooltip != null) {
                message.enable_edit_tooltip = EnableEditTooltip.fromObject(data.enable_edit_tooltip);
            }
            if (data.text != null) {
                message.text = CreateText.fromObject(data.text);
            }
            if (data.button != null) {
                message.button = CreateButton.fromObject(data.button);
            }
            if (data.slider != null) {
                message.slider = CreateSlider.fromObject(data.slider);
            }
            if (data.plot != null) {
                message.plot = CreatePlot.fromObject(data.plot);
            }
            if (data.rich_plot != null) {
                message.rich_plot = CreateRichPlot.fromObject(data.rich_plot);
            }
            if (data.set_rich_plot_data != null) {
                message.set_rich_plot_data = SetRichPlotData.fromObject(data.set_rich_plot_data);
            }
            if (data.set_rich_plot_bounds != null) {
                message.set_rich_plot_bounds = SetRichPlotBounds.fromObject(data.set_rich_plot_bounds);
            }
            if (data.set_ui_elem_pos != null) {
                message.set_ui_elem_pos = SetUIElemPos.fromObject(data.set_ui_elem_pos);
            }
            if (data.set_ui_elem_size != null) {
                message.set_ui_elem_size = SetUIElemSize.fromObject(data.set_ui_elem_size);
            }
            if (data.delete_ui_elem != null) {
                message.delete_ui_elem = DeleteUIElem.fromObject(data.delete_ui_elem);
            }
            if (data.delete_object != null) {
                message.delete_object = DeleteObject.fromObject(data.delete_object);
            }
            if (data.set_text_contents != null) {
                message.set_text_contents = SetTextContents.fromObject(data.set_text_contents);
            }
            if (data.set_button_label != null) {
                message.set_button_label = SetButtonLabel.fromObject(data.set_button_label);
            }
            if (data.set_slider_value != null) {
                message.set_slider_value = SetSliderValue.fromObject(data.set_slider_value);
            }
            if (data.set_slider_min != null) {
                message.set_slider_min = SetSliderMin.fromObject(data.set_slider_min);
            }
            if (data.set_slider_max != null) {
                message.set_slider_max = SetSliderMax.fromObject(data.set_slider_max);
            }
            if (data.set_plot_data != null) {
                message.set_plot_data = SetPlotData.fromObject(data.set_plot_data);
            }
            if (data.dropdown != null) {
                message.dropdown = Dropdown.fromObject(data.dropdown);
            }
            return message;
        }
        toObject() {
            const data: {
                set_frames_per_second?: ReturnType<typeof SetFramesPerSecond.prototype.toObject>;
                clear_all?: ReturnType<typeof ClearAll.prototype.toObject>;
                layer?: ReturnType<typeof CreateLayer.prototype.toObject>;
                box?: ReturnType<typeof CreateBox.prototype.toObject>;
                sphere?: ReturnType<typeof CreateSphere.prototype.toObject>;
                cone?: ReturnType<typeof CreateCone.prototype.toObject>;
                cylinder?: ReturnType<typeof CreateCylinder.prototype.toObject>;
                capsule?: ReturnType<typeof CreateCapsule.prototype.toObject>;
                line?: ReturnType<typeof CreateLine.prototype.toObject>;
                mesh?: ReturnType<typeof CreateMesh.prototype.toObject>;
                texture?: ReturnType<typeof CreateTexture.prototype.toObject>;
                set_object_position?: ReturnType<typeof SetObjectPosition.prototype.toObject>;
                set_object_rotation?: ReturnType<typeof SetObjectRotation.prototype.toObject>;
                set_object_color?: ReturnType<typeof SetObjectColor.prototype.toObject>;
                set_object_scale?: ReturnType<typeof SetObjectScale.prototype.toObject>;
                set_object_tooltip?: ReturnType<typeof SetObjectTooltip.prototype.toObject>;
                delete_object_tooltip?: ReturnType<typeof DeleteObjectTooltip.prototype.toObject>;
                set_span_warning?: ReturnType<typeof SetSpanWarning.prototype.toObject>;
                set_object_warning?: ReturnType<typeof SetObjectWarning.prototype.toObject>;
                delete_object_warning?: ReturnType<typeof DeleteObjectWarning.prototype.toObject>;
                enable_drag?: ReturnType<typeof EnableDrag.prototype.toObject>;
                enable_edit_tooltip?: ReturnType<typeof EnableEditTooltip.prototype.toObject>;
                text?: ReturnType<typeof CreateText.prototype.toObject>;
                button?: ReturnType<typeof CreateButton.prototype.toObject>;
                slider?: ReturnType<typeof CreateSlider.prototype.toObject>;
                plot?: ReturnType<typeof CreatePlot.prototype.toObject>;
                rich_plot?: ReturnType<typeof CreateRichPlot.prototype.toObject>;
                set_rich_plot_data?: ReturnType<typeof SetRichPlotData.prototype.toObject>;
                set_rich_plot_bounds?: ReturnType<typeof SetRichPlotBounds.prototype.toObject>;
                set_ui_elem_pos?: ReturnType<typeof SetUIElemPos.prototype.toObject>;
                set_ui_elem_size?: ReturnType<typeof SetUIElemSize.prototype.toObject>;
                delete_ui_elem?: ReturnType<typeof DeleteUIElem.prototype.toObject>;
                delete_object?: ReturnType<typeof DeleteObject.prototype.toObject>;
                set_text_contents?: ReturnType<typeof SetTextContents.prototype.toObject>;
                set_button_label?: ReturnType<typeof SetButtonLabel.prototype.toObject>;
                set_slider_value?: ReturnType<typeof SetSliderValue.prototype.toObject>;
                set_slider_min?: ReturnType<typeof SetSliderMin.prototype.toObject>;
                set_slider_max?: ReturnType<typeof SetSliderMax.prototype.toObject>;
                set_plot_data?: ReturnType<typeof SetPlotData.prototype.toObject>;
                dropdown?: ReturnType<typeof Dropdown.prototype.toObject>;
            } = {};
            if (this.set_frames_per_second != null) {
                data.set_frames_per_second = this.set_frames_per_second.toObject();
            }
            if (this.clear_all != null) {
                data.clear_all = this.clear_all.toObject();
            }
            if (this.layer != null) {
                data.layer = this.layer.toObject();
            }
            if (this.box != null) {
                data.box = this.box.toObject();
            }
            if (this.sphere != null) {
                data.sphere = this.sphere.toObject();
            }
            if (this.cone != null) {
                data.cone = this.cone.toObject();
            }
            if (this.cylinder != null) {
                data.cylinder = this.cylinder.toObject();
            }
            if (this.capsule != null) {
                data.capsule = this.capsule.toObject();
            }
            if (this.line != null) {
                data.line = this.line.toObject();
            }
            if (this.mesh != null) {
                data.mesh = this.mesh.toObject();
            }
            if (this.texture != null) {
                data.texture = this.texture.toObject();
            }
            if (this.set_object_position != null) {
                data.set_object_position = this.set_object_position.toObject();
            }
            if (this.set_object_rotation != null) {
                data.set_object_rotation = this.set_object_rotation.toObject();
            }
            if (this.set_object_color != null) {
                data.set_object_color = this.set_object_color.toObject();
            }
            if (this.set_object_scale != null) {
                data.set_object_scale = this.set_object_scale.toObject();
            }
            if (this.set_object_tooltip != null) {
                data.set_object_tooltip = this.set_object_tooltip.toObject();
            }
            if (this.delete_object_tooltip != null) {
                data.delete_object_tooltip = this.delete_object_tooltip.toObject();
            }
            if (this.set_span_warning != null) {
                data.set_span_warning = this.set_span_warning.toObject();
            }
            if (this.set_object_warning != null) {
                data.set_object_warning = this.set_object_warning.toObject();
            }
            if (this.delete_object_warning != null) {
                data.delete_object_warning = this.delete_object_warning.toObject();
            }
            if (this.enable_drag != null) {
                data.enable_drag = this.enable_drag.toObject();
            }
            if (this.enable_edit_tooltip != null) {
                data.enable_edit_tooltip = this.enable_edit_tooltip.toObject();
            }
            if (this.text != null) {
                data.text = this.text.toObject();
            }
            if (this.button != null) {
                data.button = this.button.toObject();
            }
            if (this.slider != null) {
                data.slider = this.slider.toObject();
            }
            if (this.plot != null) {
                data.plot = this.plot.toObject();
            }
            if (this.rich_plot != null) {
                data.rich_plot = this.rich_plot.toObject();
            }
            if (this.set_rich_plot_data != null) {
                data.set_rich_plot_data = this.set_rich_plot_data.toObject();
            }
            if (this.set_rich_plot_bounds != null) {
                data.set_rich_plot_bounds = this.set_rich_plot_bounds.toObject();
            }
            if (this.set_ui_elem_pos != null) {
                data.set_ui_elem_pos = this.set_ui_elem_pos.toObject();
            }
            if (this.set_ui_elem_size != null) {
                data.set_ui_elem_size = this.set_ui_elem_size.toObject();
            }
            if (this.delete_ui_elem != null) {
                data.delete_ui_elem = this.delete_ui_elem.toObject();
            }
            if (this.delete_object != null) {
                data.delete_object = this.delete_object.toObject();
            }
            if (this.set_text_contents != null) {
                data.set_text_contents = this.set_text_contents.toObject();
            }
            if (this.set_button_label != null) {
                data.set_button_label = this.set_button_label.toObject();
            }
            if (this.set_slider_value != null) {
                data.set_slider_value = this.set_slider_value.toObject();
            }
            if (this.set_slider_min != null) {
                data.set_slider_min = this.set_slider_min.toObject();
            }
            if (this.set_slider_max != null) {
                data.set_slider_max = this.set_slider_max.toObject();
            }
            if (this.set_plot_data != null) {
                data.set_plot_data = this.set_plot_data.toObject();
            }
            if (this.dropdown != null) {
                data.dropdown = this.dropdown.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_set_frames_per_second)
                writer.writeMessage(31, this.set_frames_per_second, () => this.set_frames_per_second.serialize(writer));
            if (this.has_clear_all)
                writer.writeMessage(16, this.clear_all, () => this.clear_all.serialize(writer));
            if (this.has_layer)
                writer.writeMessage(1, this.layer, () => this.layer.serialize(writer));
            if (this.has_box)
                writer.writeMessage(2, this.box, () => this.box.serialize(writer));
            if (this.has_sphere)
                writer.writeMessage(9, this.sphere, () => this.sphere.serialize(writer));
            if (this.has_cone)
                writer.writeMessage(36, this.cone, () => this.cone.serialize(writer));
            if (this.has_cylinder)
                writer.writeMessage(35, this.cylinder, () => this.cylinder.serialize(writer));
            if (this.has_capsule)
                writer.writeMessage(10, this.capsule, () => this.capsule.serialize(writer));
            if (this.has_line)
                writer.writeMessage(11, this.line, () => this.line.serialize(writer));
            if (this.has_mesh)
                writer.writeMessage(3, this.mesh, () => this.mesh.serialize(writer));
            if (this.has_texture)
                writer.writeMessage(4, this.texture, () => this.texture.serialize(writer));
            if (this.has_set_object_position)
                writer.writeMessage(5, this.set_object_position, () => this.set_object_position.serialize(writer));
            if (this.has_set_object_rotation)
                writer.writeMessage(6, this.set_object_rotation, () => this.set_object_rotation.serialize(writer));
            if (this.has_set_object_color)
                writer.writeMessage(7, this.set_object_color, () => this.set_object_color.serialize(writer));
            if (this.has_set_object_scale)
                writer.writeMessage(8, this.set_object_scale, () => this.set_object_scale.serialize(writer));
            if (this.has_set_object_tooltip)
                writer.writeMessage(32, this.set_object_tooltip, () => this.set_object_tooltip.serialize(writer));
            if (this.has_delete_object_tooltip)
                writer.writeMessage(33, this.delete_object_tooltip, () => this.delete_object_tooltip.serialize(writer));
            if (this.has_set_span_warning)
                writer.writeMessage(38, this.set_span_warning, () => this.set_span_warning.serialize(writer));
            if (this.has_set_object_warning)
                writer.writeMessage(37, this.set_object_warning, () => this.set_object_warning.serialize(writer));
            if (this.has_delete_object_warning)
                writer.writeMessage(39, this.delete_object_warning, () => this.delete_object_warning.serialize(writer));
            if (this.has_enable_drag)
                writer.writeMessage(18, this.enable_drag, () => this.enable_drag.serialize(writer));
            if (this.has_enable_edit_tooltip)
                writer.writeMessage(34, this.enable_edit_tooltip, () => this.enable_edit_tooltip.serialize(writer));
            if (this.has_text)
                writer.writeMessage(12, this.text, () => this.text.serialize(writer));
            if (this.has_button)
                writer.writeMessage(13, this.button, () => this.button.serialize(writer));
            if (this.has_slider)
                writer.writeMessage(14, this.slider, () => this.slider.serialize(writer));
            if (this.has_plot)
                writer.writeMessage(15, this.plot, () => this.plot.serialize(writer));
            if (this.has_rich_plot)
                writer.writeMessage(29, this.rich_plot, () => this.rich_plot.serialize(writer));
            if (this.has_set_rich_plot_data)
                writer.writeMessage(17, this.set_rich_plot_data, () => this.set_rich_plot_data.serialize(writer));
            if (this.has_set_rich_plot_bounds)
                writer.writeMessage(30, this.set_rich_plot_bounds, () => this.set_rich_plot_bounds.serialize(writer));
            if (this.has_set_ui_elem_pos)
                writer.writeMessage(19, this.set_ui_elem_pos, () => this.set_ui_elem_pos.serialize(writer));
            if (this.has_set_ui_elem_size)
                writer.writeMessage(20, this.set_ui_elem_size, () => this.set_ui_elem_size.serialize(writer));
            if (this.has_delete_ui_elem)
                writer.writeMessage(21, this.delete_ui_elem, () => this.delete_ui_elem.serialize(writer));
            if (this.has_delete_object)
                writer.writeMessage(22, this.delete_object, () => this.delete_object.serialize(writer));
            if (this.has_set_text_contents)
                writer.writeMessage(23, this.set_text_contents, () => this.set_text_contents.serialize(writer));
            if (this.has_set_button_label)
                writer.writeMessage(24, this.set_button_label, () => this.set_button_label.serialize(writer));
            if (this.has_set_slider_value)
                writer.writeMessage(25, this.set_slider_value, () => this.set_slider_value.serialize(writer));
            if (this.has_set_slider_min)
                writer.writeMessage(26, this.set_slider_min, () => this.set_slider_min.serialize(writer));
            if (this.has_set_slider_max)
                writer.writeMessage(27, this.set_slider_max, () => this.set_slider_max.serialize(writer));
            if (this.has_set_plot_data)
                writer.writeMessage(28, this.set_plot_data, () => this.set_plot_data.serialize(writer));
            if (this.has_dropdown)
                writer.writeMessage(40, this.dropdown, () => this.dropdown.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 31:
                        reader.readMessage(message.set_frames_per_second, () => message.set_frames_per_second = SetFramesPerSecond.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.clear_all, () => message.clear_all = ClearAll.deserialize(reader));
                        break;
                    case 1:
                        reader.readMessage(message.layer, () => message.layer = CreateLayer.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.box, () => message.box = CreateBox.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.sphere, () => message.sphere = CreateSphere.deserialize(reader));
                        break;
                    case 36:
                        reader.readMessage(message.cone, () => message.cone = CreateCone.deserialize(reader));
                        break;
                    case 35:
                        reader.readMessage(message.cylinder, () => message.cylinder = CreateCylinder.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.capsule, () => message.capsule = CreateCapsule.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.line, () => message.line = CreateLine.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.mesh, () => message.mesh = CreateMesh.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.texture, () => message.texture = CreateTexture.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.set_object_position, () => message.set_object_position = SetObjectPosition.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.set_object_rotation, () => message.set_object_rotation = SetObjectRotation.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.set_object_color, () => message.set_object_color = SetObjectColor.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.set_object_scale, () => message.set_object_scale = SetObjectScale.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.set_object_tooltip, () => message.set_object_tooltip = SetObjectTooltip.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.delete_object_tooltip, () => message.delete_object_tooltip = DeleteObjectTooltip.deserialize(reader));
                        break;
                    case 38:
                        reader.readMessage(message.set_span_warning, () => message.set_span_warning = SetSpanWarning.deserialize(reader));
                        break;
                    case 37:
                        reader.readMessage(message.set_object_warning, () => message.set_object_warning = SetObjectWarning.deserialize(reader));
                        break;
                    case 39:
                        reader.readMessage(message.delete_object_warning, () => message.delete_object_warning = DeleteObjectWarning.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.enable_drag, () => message.enable_drag = EnableDrag.deserialize(reader));
                        break;
                    case 34:
                        reader.readMessage(message.enable_edit_tooltip, () => message.enable_edit_tooltip = EnableEditTooltip.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.text, () => message.text = CreateText.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.button, () => message.button = CreateButton.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.slider, () => message.slider = CreateSlider.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.plot, () => message.plot = CreatePlot.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.rich_plot, () => message.rich_plot = CreateRichPlot.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.set_rich_plot_data, () => message.set_rich_plot_data = SetRichPlotData.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.set_rich_plot_bounds, () => message.set_rich_plot_bounds = SetRichPlotBounds.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.set_ui_elem_pos, () => message.set_ui_elem_pos = SetUIElemPos.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.set_ui_elem_size, () => message.set_ui_elem_size = SetUIElemSize.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.delete_ui_elem, () => message.delete_ui_elem = DeleteUIElem.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.delete_object, () => message.delete_object = DeleteObject.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.set_text_contents, () => message.set_text_contents = SetTextContents.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.set_button_label, () => message.set_button_label = SetButtonLabel.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.set_slider_value, () => message.set_slider_value = SetSliderValue.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.set_slider_min, () => message.set_slider_min = SetSliderMin.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.set_slider_max, () => message.set_slider_max = SetSliderMax.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.set_plot_data, () => message.set_plot_data = SetPlotData.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.dropdown, () => message.dropdown = Dropdown.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Command {
            return Command.deserialize(bytes);
        }
    }
    export class SetFramesPerSecond extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            framesPerSecond?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("framesPerSecond" in data && data.framesPerSecond != undefined) {
                    this.framesPerSecond = data.framesPerSecond;
                }
            }
        }
        get framesPerSecond() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set framesPerSecond(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            framesPerSecond?: number;
        }): SetFramesPerSecond {
            const message = new SetFramesPerSecond({});
            if (data.framesPerSecond != null) {
                message.framesPerSecond = data.framesPerSecond;
            }
            return message;
        }
        toObject() {
            const data: {
                framesPerSecond?: number;
            } = {};
            if (this.framesPerSecond != null) {
                data.framesPerSecond = this.framesPerSecond;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.framesPerSecond != 0)
                writer.writeInt32(1, this.framesPerSecond);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetFramesPerSecond {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetFramesPerSecond();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.framesPerSecond = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetFramesPerSecond {
            return SetFramesPerSecond.deserialize(bytes);
        }
    }
    export class ClearAll extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dummy?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dummy" in data && data.dummy != undefined) {
                    this.dummy = data.dummy;
                }
            }
        }
        get dummy() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set dummy(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            dummy?: boolean;
        }): ClearAll {
            const message = new ClearAll({});
            if (data.dummy != null) {
                message.dummy = data.dummy;
            }
            return message;
        }
        toObject() {
            const data: {
                dummy?: boolean;
            } = {};
            if (this.dummy != null) {
                data.dummy = this.dummy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dummy != false)
                writer.writeBool(1, this.dummy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearAll {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearAll();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dummy = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearAll {
            return ClearAll.deserialize(bytes);
        }
    }
    export class CreateLayer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            name?: string;
            color?: number[];
            default_show?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
                if ("default_show" in data && data.default_show != undefined) {
                    this.default_show = data.default_show;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set color(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get default_show() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set default_show(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: number;
            name?: string;
            color?: number[];
            default_show?: boolean;
        }): CreateLayer {
            const message = new CreateLayer({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            if (data.default_show != null) {
                message.default_show = data.default_show;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                name?: string;
                color?: number[];
                default_show?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            if (this.default_show != null) {
                data.default_show = this.default_show;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.color.length)
                writer.writePackedFloat(3, this.color);
            if (this.default_show != false)
                writer.writeBool(4, this.default_show);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLayer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.color = reader.readPackedFloat();
                        break;
                    case 4:
                        message.default_show = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateLayer {
            return CreateLayer.deserialize(bytes);
        }
    }
    export class CreateBox extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("cast_shadows" in data && data.cast_shadows != undefined) {
                    this.cast_shadows = data.cast_shadows;
                }
                if ("receive_shadows" in data && data.receive_shadows != undefined) {
                    this.receive_shadows = data.receive_shadows;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cast_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cast_shadows(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get receive_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set receive_shadows(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }): CreateBox {
            const message = new CreateBox({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.cast_shadows != null) {
                message.cast_shadows = data.cast_shadows;
            }
            if (data.receive_shadows != null) {
                message.receive_shadows = data.receive_shadows;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
                layer?: number;
                cast_shadows?: boolean;
                receive_shadows?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.cast_shadows != null) {
                data.cast_shadows = this.cast_shadows;
            }
            if (this.receive_shadows != null) {
                data.receive_shadows = this.receive_shadows;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (this.layer != 0)
                writer.writeInt32(3, this.layer);
            if (this.cast_shadows != false)
                writer.writeBool(4, this.cast_shadows);
            if (this.receive_shadows != false)
                writer.writeBool(5, this.receive_shadows);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateBox {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateBox();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    case 3:
                        message.layer = reader.readInt32();
                        break;
                    case 4:
                        message.cast_shadows = reader.readBool();
                        break;
                    case 5:
                        message.receive_shadows = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateBox {
            return CreateBox.deserialize(bytes);
        }
    }
    export class CreateSphere extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("cast_shadows" in data && data.cast_shadows != undefined) {
                    this.cast_shadows = data.cast_shadows;
                }
                if ("receive_shadows" in data && data.receive_shadows != undefined) {
                    this.receive_shadows = data.receive_shadows;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cast_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cast_shadows(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get receive_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set receive_shadows(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }): CreateSphere {
            const message = new CreateSphere({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.cast_shadows != null) {
                message.cast_shadows = data.cast_shadows;
            }
            if (data.receive_shadows != null) {
                message.receive_shadows = data.receive_shadows;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
                layer?: number;
                cast_shadows?: boolean;
                receive_shadows?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.cast_shadows != null) {
                data.cast_shadows = this.cast_shadows;
            }
            if (this.receive_shadows != null) {
                data.receive_shadows = this.receive_shadows;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (this.layer != 0)
                writer.writeInt32(3, this.layer);
            if (this.cast_shadows != false)
                writer.writeBool(4, this.cast_shadows);
            if (this.receive_shadows != false)
                writer.writeBool(5, this.receive_shadows);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSphere {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSphere();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    case 3:
                        message.layer = reader.readInt32();
                        break;
                    case 4:
                        message.cast_shadows = reader.readBool();
                        break;
                    case 5:
                        message.receive_shadows = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSphere {
            return CreateSphere.deserialize(bytes);
        }
    }
    export class CreateCone extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("cast_shadows" in data && data.cast_shadows != undefined) {
                    this.cast_shadows = data.cast_shadows;
                }
                if ("receive_shadows" in data && data.receive_shadows != undefined) {
                    this.receive_shadows = data.receive_shadows;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cast_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cast_shadows(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get receive_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set receive_shadows(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }): CreateCone {
            const message = new CreateCone({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.cast_shadows != null) {
                message.cast_shadows = data.cast_shadows;
            }
            if (data.receive_shadows != null) {
                message.receive_shadows = data.receive_shadows;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
                layer?: number;
                cast_shadows?: boolean;
                receive_shadows?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.cast_shadows != null) {
                data.cast_shadows = this.cast_shadows;
            }
            if (this.receive_shadows != null) {
                data.receive_shadows = this.receive_shadows;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (this.layer != 0)
                writer.writeInt32(3, this.layer);
            if (this.cast_shadows != false)
                writer.writeBool(4, this.cast_shadows);
            if (this.receive_shadows != false)
                writer.writeBool(5, this.receive_shadows);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCone {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCone();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    case 3:
                        message.layer = reader.readInt32();
                        break;
                    case 4:
                        message.cast_shadows = reader.readBool();
                        break;
                    case 5:
                        message.receive_shadows = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCone {
            return CreateCone.deserialize(bytes);
        }
    }
    export class CreateCylinder extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("cast_shadows" in data && data.cast_shadows != undefined) {
                    this.cast_shadows = data.cast_shadows;
                }
                if ("receive_shadows" in data && data.receive_shadows != undefined) {
                    this.receive_shadows = data.receive_shadows;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cast_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cast_shadows(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get receive_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set receive_shadows(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }): CreateCylinder {
            const message = new CreateCylinder({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.cast_shadows != null) {
                message.cast_shadows = data.cast_shadows;
            }
            if (data.receive_shadows != null) {
                message.receive_shadows = data.receive_shadows;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
                layer?: number;
                cast_shadows?: boolean;
                receive_shadows?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.cast_shadows != null) {
                data.cast_shadows = this.cast_shadows;
            }
            if (this.receive_shadows != null) {
                data.receive_shadows = this.receive_shadows;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (this.layer != 0)
                writer.writeInt32(3, this.layer);
            if (this.cast_shadows != false)
                writer.writeBool(4, this.cast_shadows);
            if (this.receive_shadows != false)
                writer.writeBool(5, this.receive_shadows);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCylinder {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCylinder();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    case 3:
                        message.layer = reader.readInt32();
                        break;
                    case 4:
                        message.cast_shadows = reader.readBool();
                        break;
                    case 5:
                        message.receive_shadows = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCylinder {
            return CreateCylinder.deserialize(bytes);
        }
    }
    export class CreateCapsule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("cast_shadows" in data && data.cast_shadows != undefined) {
                    this.cast_shadows = data.cast_shadows;
                }
                if ("receive_shadows" in data && data.receive_shadows != undefined) {
                    this.receive_shadows = data.receive_shadows;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get cast_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cast_shadows(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get receive_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set receive_shadows(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }): CreateCapsule {
            const message = new CreateCapsule({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.cast_shadows != null) {
                message.cast_shadows = data.cast_shadows;
            }
            if (data.receive_shadows != null) {
                message.receive_shadows = data.receive_shadows;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
                layer?: number;
                cast_shadows?: boolean;
                receive_shadows?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.cast_shadows != null) {
                data.cast_shadows = this.cast_shadows;
            }
            if (this.receive_shadows != null) {
                data.receive_shadows = this.receive_shadows;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (this.layer != 0)
                writer.writeInt32(3, this.layer);
            if (this.cast_shadows != false)
                writer.writeBool(4, this.cast_shadows);
            if (this.receive_shadows != false)
                writer.writeBool(5, this.receive_shadows);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCapsule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCapsule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    case 3:
                        message.layer = reader.readInt32();
                        break;
                    case 4:
                        message.cast_shadows = reader.readBool();
                        break;
                    case 5:
                        message.receive_shadows = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCapsule {
            return CreateCapsule.deserialize(bytes);
        }
    }
    export class CreateLine extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            points?: number[];
            color?: number[];
            layer?: number;
            width?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("width" in data && data.width != undefined) {
                    this.width = data.width;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get points() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set points(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set color(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get width() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set width(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            points?: number[];
            color?: number[];
            layer?: number;
            width?: number[];
        }): CreateLine {
            const message = new CreateLine({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.points != null) {
                message.points = data.points;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.width != null) {
                message.width = data.width;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                points?: number[];
                color?: number[];
                layer?: number;
                width?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.points != null) {
                data.points = this.points;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.width != null) {
                data.width = this.width;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.points.length)
                writer.writePackedFloat(2, this.points);
            if (this.color.length)
                writer.writePackedFloat(3, this.color);
            if (this.layer != 0)
                writer.writeInt32(4, this.layer);
            if (this.width.length)
                writer.writePackedFloat(5, this.width);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateLine {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateLine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.points = reader.readPackedFloat();
                        break;
                    case 3:
                        message.color = reader.readPackedFloat();
                        break;
                    case 4:
                        message.layer = reader.readInt32();
                        break;
                    case 5:
                        message.width = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateLine {
            return CreateLine.deserialize(bytes);
        }
    }
    export class CreateMesh extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            vertex?: number[];
            vertex_normal?: number[];
            face?: number[];
            uv?: number[];
            texture?: number[];
            texture_start?: number[];
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4, 5, 6, 7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("vertex" in data && data.vertex != undefined) {
                    this.vertex = data.vertex;
                }
                if ("vertex_normal" in data && data.vertex_normal != undefined) {
                    this.vertex_normal = data.vertex_normal;
                }
                if ("face" in data && data.face != undefined) {
                    this.face = data.face;
                }
                if ("uv" in data && data.uv != undefined) {
                    this.uv = data.uv;
                }
                if ("texture" in data && data.texture != undefined) {
                    this.texture = data.texture;
                }
                if ("texture_start" in data && data.texture_start != undefined) {
                    this.texture_start = data.texture_start;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("cast_shadows" in data && data.cast_shadows != undefined) {
                    this.cast_shadows = data.cast_shadows;
                }
                if ("receive_shadows" in data && data.receive_shadows != undefined) {
                    this.receive_shadows = data.receive_shadows;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get vertex() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set vertex(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get vertex_normal() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set vertex_normal(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get face() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set face(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get uv() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set uv(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get texture() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set texture(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get texture_start() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set texture_start(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get cast_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set cast_shadows(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get receive_shadows() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set receive_shadows(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            key?: number;
            vertex?: number[];
            vertex_normal?: number[];
            face?: number[];
            uv?: number[];
            texture?: number[];
            texture_start?: number[];
            data?: number[];
            layer?: number;
            cast_shadows?: boolean;
            receive_shadows?: boolean;
        }): CreateMesh {
            const message = new CreateMesh({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.vertex != null) {
                message.vertex = data.vertex;
            }
            if (data.vertex_normal != null) {
                message.vertex_normal = data.vertex_normal;
            }
            if (data.face != null) {
                message.face = data.face;
            }
            if (data.uv != null) {
                message.uv = data.uv;
            }
            if (data.texture != null) {
                message.texture = data.texture;
            }
            if (data.texture_start != null) {
                message.texture_start = data.texture_start;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.cast_shadows != null) {
                message.cast_shadows = data.cast_shadows;
            }
            if (data.receive_shadows != null) {
                message.receive_shadows = data.receive_shadows;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                vertex?: number[];
                vertex_normal?: number[];
                face?: number[];
                uv?: number[];
                texture?: number[];
                texture_start?: number[];
                data?: number[];
                layer?: number;
                cast_shadows?: boolean;
                receive_shadows?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.vertex != null) {
                data.vertex = this.vertex;
            }
            if (this.vertex_normal != null) {
                data.vertex_normal = this.vertex_normal;
            }
            if (this.face != null) {
                data.face = this.face;
            }
            if (this.uv != null) {
                data.uv = this.uv;
            }
            if (this.texture != null) {
                data.texture = this.texture;
            }
            if (this.texture_start != null) {
                data.texture_start = this.texture_start;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.cast_shadows != null) {
                data.cast_shadows = this.cast_shadows;
            }
            if (this.receive_shadows != null) {
                data.receive_shadows = this.receive_shadows;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.vertex.length)
                writer.writePackedFloat(2, this.vertex);
            if (this.vertex_normal.length)
                writer.writePackedFloat(3, this.vertex_normal);
            if (this.face.length)
                writer.writePackedInt32(4, this.face);
            if (this.uv.length)
                writer.writePackedFloat(5, this.uv);
            if (this.texture.length)
                writer.writePackedInt32(6, this.texture);
            if (this.texture_start.length)
                writer.writePackedInt32(7, this.texture_start);
            if (this.data.length)
                writer.writePackedFloat(8, this.data);
            if (this.layer != 0)
                writer.writeInt32(9, this.layer);
            if (this.cast_shadows != false)
                writer.writeBool(10, this.cast_shadows);
            if (this.receive_shadows != false)
                writer.writeBool(11, this.receive_shadows);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMesh {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMesh();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.vertex = reader.readPackedFloat();
                        break;
                    case 3:
                        message.vertex_normal = reader.readPackedFloat();
                        break;
                    case 4:
                        message.face = reader.readPackedInt32();
                        break;
                    case 5:
                        message.uv = reader.readPackedFloat();
                        break;
                    case 6:
                        message.texture = reader.readPackedInt32();
                        break;
                    case 7:
                        message.texture_start = reader.readPackedInt32();
                        break;
                    case 8:
                        message.data = reader.readPackedFloat();
                        break;
                    case 9:
                        message.layer = reader.readInt32();
                        break;
                    case 10:
                        message.cast_shadows = reader.readBool();
                        break;
                    case 11:
                        message.receive_shadows = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateMesh {
            return CreateMesh.deserialize(bytes);
        }
    }
    export class CreateTexture extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            base64?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("base64" in data && data.base64 != undefined) {
                    this.base64 = data.base64;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get base64() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set base64(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            base64?: string;
        }): CreateTexture {
            const message = new CreateTexture({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.base64 != null) {
                message.base64 = data.base64;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                base64?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.base64 != null) {
                data.base64 = this.base64;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.base64.length)
                writer.writeString(2, this.base64);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateTexture {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateTexture();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.base64 = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateTexture {
            return CreateTexture.deserialize(bytes);
        }
    }
    export class SetObjectPosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
        }): SetObjectPosition {
            const message = new SetObjectPosition({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetObjectPosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetObjectPosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetObjectPosition {
            return SetObjectPosition.deserialize(bytes);
        }
    }
    export class SetObjectRotation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
        }): SetObjectRotation {
            const message = new SetObjectRotation({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetObjectRotation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetObjectRotation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetObjectRotation {
            return SetObjectRotation.deserialize(bytes);
        }
    }
    export class SetObjectColor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
        }): SetObjectColor {
            const message = new SetObjectColor({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetObjectColor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetObjectColor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetObjectColor {
            return SetObjectColor.deserialize(bytes);
        }
    }
    export class SetObjectScale extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            data?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            data?: number[];
        }): SetObjectScale {
            const message = new SetObjectScale({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                data?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.data.length)
                writer.writePackedFloat(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetObjectScale {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetObjectScale();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.data = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetObjectScale {
            return SetObjectScale.deserialize(bytes);
        }
    }
    export class SetObjectTooltip extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            tooltip?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("tooltip" in data && data.tooltip != undefined) {
                    this.tooltip = data.tooltip;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tooltip() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tooltip(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            tooltip?: string;
        }): SetObjectTooltip {
            const message = new SetObjectTooltip({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.tooltip != null) {
                message.tooltip = data.tooltip;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                tooltip?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.tooltip != null) {
                data.tooltip = this.tooltip;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.tooltip.length)
                writer.writeString(2, this.tooltip);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetObjectTooltip {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetObjectTooltip();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.tooltip = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetObjectTooltip {
            return SetObjectTooltip.deserialize(bytes);
        }
    }
    export class DeleteObjectTooltip extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: number;
        }): DeleteObjectTooltip {
            const message = new DeleteObjectTooltip({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteObjectTooltip {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteObjectTooltip();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteObjectTooltip {
            return DeleteObjectTooltip.deserialize(bytes);
        }
    }
    export class SetSpanWarning extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start_timestep?: number;
            end_timestep?: number;
            warning_key?: number;
            warning?: string;
            layer?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_timestep" in data && data.start_timestep != undefined) {
                    this.start_timestep = data.start_timestep;
                }
                if ("end_timestep" in data && data.end_timestep != undefined) {
                    this.end_timestep = data.end_timestep;
                }
                if ("warning_key" in data && data.warning_key != undefined) {
                    this.warning_key = data.warning_key;
                }
                if ("warning" in data && data.warning != undefined) {
                    this.warning = data.warning;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
            }
        }
        get start_timestep() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set start_timestep(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get end_timestep() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set end_timestep(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get warning_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set warning_key(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get warning() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set warning(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            start_timestep?: number;
            end_timestep?: number;
            warning_key?: number;
            warning?: string;
            layer?: number;
        }): SetSpanWarning {
            const message = new SetSpanWarning({});
            if (data.start_timestep != null) {
                message.start_timestep = data.start_timestep;
            }
            if (data.end_timestep != null) {
                message.end_timestep = data.end_timestep;
            }
            if (data.warning_key != null) {
                message.warning_key = data.warning_key;
            }
            if (data.warning != null) {
                message.warning = data.warning;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            return message;
        }
        toObject() {
            const data: {
                start_timestep?: number;
                end_timestep?: number;
                warning_key?: number;
                warning?: string;
                layer?: number;
            } = {};
            if (this.start_timestep != null) {
                data.start_timestep = this.start_timestep;
            }
            if (this.end_timestep != null) {
                data.end_timestep = this.end_timestep;
            }
            if (this.warning_key != null) {
                data.warning_key = this.warning_key;
            }
            if (this.warning != null) {
                data.warning = this.warning;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start_timestep != 0)
                writer.writeInt32(1, this.start_timestep);
            if (this.end_timestep != 0)
                writer.writeInt32(2, this.end_timestep);
            if (this.warning_key != 0)
                writer.writeInt32(3, this.warning_key);
            if (this.warning.length)
                writer.writeString(4, this.warning);
            if (this.layer != 0)
                writer.writeInt32(5, this.layer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSpanWarning {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSpanWarning();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start_timestep = reader.readInt32();
                        break;
                    case 2:
                        message.end_timestep = reader.readInt32();
                        break;
                    case 3:
                        message.warning_key = reader.readInt32();
                        break;
                    case 4:
                        message.warning = reader.readString();
                        break;
                    case 5:
                        message.layer = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSpanWarning {
            return SetSpanWarning.deserialize(bytes);
        }
    }
    export class SetObjectWarning extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            warning?: string;
            warning_key?: number;
            layer?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("warning" in data && data.warning != undefined) {
                    this.warning = data.warning;
                }
                if ("warning_key" in data && data.warning_key != undefined) {
                    this.warning_key = data.warning_key;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get warning() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set warning(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get warning_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set warning_key(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: number;
            warning?: string;
            warning_key?: number;
            layer?: number;
        }): SetObjectWarning {
            const message = new SetObjectWarning({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.warning != null) {
                message.warning = data.warning;
            }
            if (data.warning_key != null) {
                message.warning_key = data.warning_key;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                warning?: string;
                warning_key?: number;
                layer?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.warning != null) {
                data.warning = this.warning;
            }
            if (this.warning_key != null) {
                data.warning_key = this.warning_key;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.warning.length)
                writer.writeString(2, this.warning);
            if (this.warning_key != 0)
                writer.writeInt32(3, this.warning_key);
            if (this.layer != 0)
                writer.writeInt32(4, this.layer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetObjectWarning {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetObjectWarning();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.warning = reader.readString();
                        break;
                    case 3:
                        message.warning_key = reader.readInt32();
                        break;
                    case 4:
                        message.layer = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetObjectWarning {
            return SetObjectWarning.deserialize(bytes);
        }
    }
    export class DeleteObjectWarning extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            warning_key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("warning_key" in data && data.warning_key != undefined) {
                    this.warning_key = data.warning_key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get warning_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set warning_key(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            warning_key?: number;
        }): DeleteObjectWarning {
            const message = new DeleteObjectWarning({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.warning_key != null) {
                message.warning_key = data.warning_key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                warning_key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.warning_key != null) {
                data.warning_key = this.warning_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.warning_key != 0)
                writer.writeInt32(2, this.warning_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteObjectWarning {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteObjectWarning();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.warning_key = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteObjectWarning {
            return DeleteObjectWarning.deserialize(bytes);
        }
    }
    export class EnableDrag extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: number;
        }): EnableDrag {
            const message = new EnableDrag({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableDrag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableDrag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableDrag {
            return EnableDrag.deserialize(bytes);
        }
    }
    export class EnableEditTooltip extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: number;
        }): EnableEditTooltip {
            const message = new EnableEditTooltip({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnableEditTooltip {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnableEditTooltip();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnableEditTooltip {
            return EnableEditTooltip.deserialize(bytes);
        }
    }
    export class CreateText extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            layer?: number;
            pos?: number[];
            contents?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("contents" in data && data.contents != undefined) {
                    this.contents = data.contents;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set pos(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get contents() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set contents(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: number;
            layer?: number;
            pos?: number[];
            contents?: string;
        }): CreateText {
            const message = new CreateText({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            if (data.contents != null) {
                message.contents = data.contents;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                layer?: number;
                pos?: number[];
                contents?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            if (this.contents != null) {
                data.contents = this.contents;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.layer != 0)
                writer.writeInt32(2, this.layer);
            if (this.pos.length)
                writer.writePackedInt32(3, this.pos);
            if (this.contents.length)
                writer.writeString(4, this.contents);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateText {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateText();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.layer = reader.readInt32();
                        break;
                    case 3:
                        message.pos = reader.readPackedInt32();
                        break;
                    case 4:
                        message.contents = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateText {
            return CreateText.deserialize(bytes);
        }
    }
    export class CreateButton extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            layer?: number;
            pos?: number[];
            label?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set pos(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: number;
            layer?: number;
            pos?: number[];
            label?: string;
        }): CreateButton {
            const message = new CreateButton({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                layer?: number;
                pos?: number[];
                label?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.layer != 0)
                writer.writeInt32(2, this.layer);
            if (this.pos.length)
                writer.writePackedInt32(3, this.pos);
            if (this.label.length)
                writer.writeString(4, this.label);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateButton {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateButton();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.layer = reader.readInt32();
                        break;
                    case 3:
                        message.pos = reader.readPackedInt32();
                        break;
                    case 4:
                        message.label = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateButton {
            return CreateButton.deserialize(bytes);
        }
    }
    export class CreateSlider extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            layer?: number;
            pos?: number[];
            data?: number[];
            only_ints?: boolean;
            horizontal?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("only_ints" in data && data.only_ints != undefined) {
                    this.only_ints = data.only_ints;
                }
                if ("horizontal" in data && data.horizontal != undefined) {
                    this.horizontal = data.horizontal;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set pos(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set data(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get only_ints() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set only_ints(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get horizontal() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set horizontal(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            key?: number;
            layer?: number;
            pos?: number[];
            data?: number[];
            only_ints?: boolean;
            horizontal?: boolean;
        }): CreateSlider {
            const message = new CreateSlider({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.only_ints != null) {
                message.only_ints = data.only_ints;
            }
            if (data.horizontal != null) {
                message.horizontal = data.horizontal;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                layer?: number;
                pos?: number[];
                data?: number[];
                only_ints?: boolean;
                horizontal?: boolean;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.only_ints != null) {
                data.only_ints = this.only_ints;
            }
            if (this.horizontal != null) {
                data.horizontal = this.horizontal;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.layer != 0)
                writer.writeInt32(2, this.layer);
            if (this.pos.length)
                writer.writePackedInt32(3, this.pos);
            if (this.data.length)
                writer.writePackedFloat(4, this.data);
            if (this.only_ints != false)
                writer.writeBool(5, this.only_ints);
            if (this.horizontal != false)
                writer.writeBool(6, this.horizontal);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSlider {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSlider();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.layer = reader.readInt32();
                        break;
                    case 3:
                        message.pos = reader.readPackedInt32();
                        break;
                    case 4:
                        message.data = reader.readPackedFloat();
                        break;
                    case 5:
                        message.only_ints = reader.readBool();
                        break;
                    case 6:
                        message.horizontal = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSlider {
            return CreateSlider.deserialize(bytes);
        }
    }
    export class CreatePlot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            layer?: number;
            pos?: number[];
            bounds?: number[];
            xs?: number[];
            ys?: number[];
            plot_type?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("bounds" in data && data.bounds != undefined) {
                    this.bounds = data.bounds;
                }
                if ("xs" in data && data.xs != undefined) {
                    this.xs = data.xs;
                }
                if ("ys" in data && data.ys != undefined) {
                    this.ys = data.ys;
                }
                if ("plot_type" in data && data.plot_type != undefined) {
                    this.plot_type = data.plot_type;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set pos(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get bounds() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set bounds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get xs() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set xs(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get ys() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set ys(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get plot_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set plot_type(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            key?: number;
            layer?: number;
            pos?: number[];
            bounds?: number[];
            xs?: number[];
            ys?: number[];
            plot_type?: string;
        }): CreatePlot {
            const message = new CreatePlot({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            if (data.bounds != null) {
                message.bounds = data.bounds;
            }
            if (data.xs != null) {
                message.xs = data.xs;
            }
            if (data.ys != null) {
                message.ys = data.ys;
            }
            if (data.plot_type != null) {
                message.plot_type = data.plot_type;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                layer?: number;
                pos?: number[];
                bounds?: number[];
                xs?: number[];
                ys?: number[];
                plot_type?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            if (this.bounds != null) {
                data.bounds = this.bounds;
            }
            if (this.xs != null) {
                data.xs = this.xs;
            }
            if (this.ys != null) {
                data.ys = this.ys;
            }
            if (this.plot_type != null) {
                data.plot_type = this.plot_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.layer != 0)
                writer.writeInt32(2, this.layer);
            if (this.pos.length)
                writer.writePackedInt32(3, this.pos);
            if (this.bounds.length)
                writer.writePackedFloat(4, this.bounds);
            if (this.xs.length)
                writer.writePackedFloat(5, this.xs);
            if (this.ys.length)
                writer.writePackedFloat(6, this.ys);
            if (this.plot_type.length)
                writer.writeString(7, this.plot_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreatePlot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreatePlot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.layer = reader.readInt32();
                        break;
                    case 3:
                        message.pos = reader.readPackedInt32();
                        break;
                    case 4:
                        message.bounds = reader.readPackedFloat();
                        break;
                    case 5:
                        message.xs = reader.readPackedFloat();
                        break;
                    case 6:
                        message.ys = reader.readPackedFloat();
                        break;
                    case 7:
                        message.plot_type = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreatePlot {
            return CreatePlot.deserialize(bytes);
        }
    }
    export class CreateRichPlot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            layer?: number;
            pos?: number[];
            bounds?: number[];
            title?: string;
            x_axis_label?: string;
            y_axis_label?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("bounds" in data && data.bounds != undefined) {
                    this.bounds = data.bounds;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("x_axis_label" in data && data.x_axis_label != undefined) {
                    this.x_axis_label = data.x_axis_label;
                }
                if ("y_axis_label" in data && data.y_axis_label != undefined) {
                    this.y_axis_label = data.y_axis_label;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set pos(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get bounds() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set bounds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get x_axis_label() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set x_axis_label(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get y_axis_label() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set y_axis_label(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            key?: number;
            layer?: number;
            pos?: number[];
            bounds?: number[];
            title?: string;
            x_axis_label?: string;
            y_axis_label?: string;
        }): CreateRichPlot {
            const message = new CreateRichPlot({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            if (data.bounds != null) {
                message.bounds = data.bounds;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.x_axis_label != null) {
                message.x_axis_label = data.x_axis_label;
            }
            if (data.y_axis_label != null) {
                message.y_axis_label = data.y_axis_label;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                layer?: number;
                pos?: number[];
                bounds?: number[];
                title?: string;
                x_axis_label?: string;
                y_axis_label?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            if (this.bounds != null) {
                data.bounds = this.bounds;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.x_axis_label != null) {
                data.x_axis_label = this.x_axis_label;
            }
            if (this.y_axis_label != null) {
                data.y_axis_label = this.y_axis_label;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.layer != 0)
                writer.writeInt32(2, this.layer);
            if (this.pos.length)
                writer.writePackedInt32(3, this.pos);
            if (this.bounds.length)
                writer.writePackedFloat(4, this.bounds);
            if (this.title.length)
                writer.writeString(5, this.title);
            if (this.x_axis_label.length)
                writer.writeString(6, this.x_axis_label);
            if (this.y_axis_label.length)
                writer.writeString(7, this.y_axis_label);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRichPlot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRichPlot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.layer = reader.readInt32();
                        break;
                    case 3:
                        message.pos = reader.readPackedInt32();
                        break;
                    case 4:
                        message.bounds = reader.readPackedFloat();
                        break;
                    case 5:
                        message.title = reader.readString();
                        break;
                    case 6:
                        message.x_axis_label = reader.readString();
                        break;
                    case 7:
                        message.y_axis_label = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRichPlot {
            return CreateRichPlot.deserialize(bytes);
        }
    }
    export class SetRichPlotData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            name?: string;
            color?: string;
            plot_type?: string;
            xs?: number[];
            ys?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("color" in data && data.color != undefined) {
                    this.color = data.color;
                }
                if ("plot_type" in data && data.plot_type != undefined) {
                    this.plot_type = data.plot_type;
                }
                if ("xs" in data && data.xs != undefined) {
                    this.xs = data.xs;
                }
                if ("ys" in data && data.ys != undefined) {
                    this.ys = data.ys;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get color() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set color(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get plot_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set plot_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get xs() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set xs(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get ys() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set ys(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            key?: number;
            name?: string;
            color?: string;
            plot_type?: string;
            xs?: number[];
            ys?: number[];
        }): SetRichPlotData {
            const message = new SetRichPlotData({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.color != null) {
                message.color = data.color;
            }
            if (data.plot_type != null) {
                message.plot_type = data.plot_type;
            }
            if (data.xs != null) {
                message.xs = data.xs;
            }
            if (data.ys != null) {
                message.ys = data.ys;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                name?: string;
                color?: string;
                plot_type?: string;
                xs?: number[];
                ys?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.color != null) {
                data.color = this.color;
            }
            if (this.plot_type != null) {
                data.plot_type = this.plot_type;
            }
            if (this.xs != null) {
                data.xs = this.xs;
            }
            if (this.ys != null) {
                data.ys = this.ys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.color.length)
                writer.writeString(3, this.color);
            if (this.plot_type.length)
                writer.writeString(4, this.plot_type);
            if (this.xs.length)
                writer.writePackedFloat(6, this.xs);
            if (this.ys.length)
                writer.writePackedFloat(7, this.ys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetRichPlotData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetRichPlotData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.color = reader.readString();
                        break;
                    case 4:
                        message.plot_type = reader.readString();
                        break;
                    case 6:
                        message.xs = reader.readPackedFloat();
                        break;
                    case 7:
                        message.ys = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetRichPlotData {
            return SetRichPlotData.deserialize(bytes);
        }
    }
    export class SetRichPlotBounds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            bounds?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("bounds" in data && data.bounds != undefined) {
                    this.bounds = data.bounds;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bounds() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set bounds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: number;
            bounds?: number[];
        }): SetRichPlotBounds {
            const message = new SetRichPlotBounds({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.bounds != null) {
                message.bounds = data.bounds;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                bounds?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.bounds != null) {
                data.bounds = this.bounds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.bounds.length)
                writer.writePackedFloat(4, this.bounds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetRichPlotBounds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetRichPlotBounds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 4:
                        message.bounds = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetRichPlotBounds {
            return SetRichPlotBounds.deserialize(bytes);
        }
    }
    export class SetUIElemPos extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            fromTopLeft?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("fromTopLeft" in data && data.fromTopLeft != undefined) {
                    this.fromTopLeft = data.fromTopLeft;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fromTopLeft() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set fromTopLeft(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            fromTopLeft?: number[];
        }): SetUIElemPos {
            const message = new SetUIElemPos({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.fromTopLeft != null) {
                message.fromTopLeft = data.fromTopLeft;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                fromTopLeft?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.fromTopLeft != null) {
                data.fromTopLeft = this.fromTopLeft;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.fromTopLeft.length)
                writer.writePackedInt32(2, this.fromTopLeft);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetUIElemPos {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetUIElemPos();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.fromTopLeft = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetUIElemPos {
            return SetUIElemPos.deserialize(bytes);
        }
    }
    export class SetUIElemSize extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            size?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set size(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            size?: number[];
        }): SetUIElemSize {
            const message = new SetUIElemSize({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                size?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.size.length)
                writer.writePackedInt32(2, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetUIElemSize {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetUIElemSize();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.size = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetUIElemSize {
            return SetUIElemSize.deserialize(bytes);
        }
    }
    export class DeleteUIElem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: number;
        }): DeleteUIElem {
            const message = new DeleteUIElem({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUIElem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUIElem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUIElem {
            return DeleteUIElem.deserialize(bytes);
        }
    }
    export class DeleteObject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            key?: number;
        }): DeleteObject {
            const message = new DeleteObject({});
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteObject {
            return DeleteObject.deserialize(bytes);
        }
    }
    export class SetTextContents extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            contents?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("contents" in data && data.contents != undefined) {
                    this.contents = data.contents;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get contents() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contents(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            contents?: string;
        }): SetTextContents {
            const message = new SetTextContents({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.contents != null) {
                message.contents = data.contents;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                contents?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.contents != null) {
                data.contents = this.contents;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.contents.length)
                writer.writeString(2, this.contents);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetTextContents {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetTextContents();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.contents = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetTextContents {
            return SetTextContents.deserialize(bytes);
        }
    }
    export class SetButtonLabel extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            label?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            label?: string;
        }): SetButtonLabel {
            const message = new SetButtonLabel({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                label?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.label.length)
                writer.writeString(2, this.label);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetButtonLabel {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetButtonLabel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.label = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetButtonLabel {
            return SetButtonLabel.deserialize(bytes);
        }
    }
    export class SetSliderValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            value?: number;
        }): SetSliderValue {
            const message = new SetSliderValue({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                value?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.value != 0)
                writer.writeFloat(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSliderValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSliderValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSliderValue {
            return SetSliderValue.deserialize(bytes);
        }
    }
    export class SetSliderMin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            value?: number;
        }): SetSliderMin {
            const message = new SetSliderMin({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                value?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.value != 0)
                writer.writeFloat(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSliderMin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSliderMin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSliderMin {
            return SetSliderMin.deserialize(bytes);
        }
    }
    export class SetSliderMax extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            value?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: number;
            value?: number;
        }): SetSliderMax {
            const message = new SetSliderMax({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                value?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.value != 0)
                writer.writeFloat(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetSliderMax {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetSliderMax();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetSliderMax {
            return SetSliderMax.deserialize(bytes);
        }
    }
    export class SetPlotData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            bounds?: number[];
            xs?: number[];
            ys?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("bounds" in data && data.bounds != undefined) {
                    this.bounds = data.bounds;
                }
                if ("xs" in data && data.xs != undefined) {
                    this.xs = data.xs;
                }
                if ("ys" in data && data.ys != undefined) {
                    this.ys = data.ys;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bounds() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set bounds(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get xs() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set xs(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get ys() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set ys(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            key?: number;
            bounds?: number[];
            xs?: number[];
            ys?: number[];
        }): SetPlotData {
            const message = new SetPlotData({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.bounds != null) {
                message.bounds = data.bounds;
            }
            if (data.xs != null) {
                message.xs = data.xs;
            }
            if (data.ys != null) {
                message.ys = data.ys;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                bounds?: number[];
                xs?: number[];
                ys?: number[];
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.bounds != null) {
                data.bounds = this.bounds;
            }
            if (this.xs != null) {
                data.xs = this.xs;
            }
            if (this.ys != null) {
                data.ys = this.ys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.bounds.length)
                writer.writePackedFloat(4, this.bounds);
            if (this.xs.length)
                writer.writePackedFloat(5, this.xs);
            if (this.ys.length)
                writer.writePackedFloat(6, this.ys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetPlotData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetPlotData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 4:
                        message.bounds = reader.readPackedFloat();
                        break;
                    case 5:
                        message.xs = reader.readPackedFloat();
                        break;
                    case 6:
                        message.ys = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetPlotData {
            return SetPlotData.deserialize(bytes);
        }
    }
    export class Dropdown extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: number;
            label?: string;
            options?: string[];
            pos?: number[];
            layer?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("layer" in data && data.layer != undefined) {
                    this.layer = data.layer;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set key(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get options() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set options(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set pos(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get layer() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set layer(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            key?: number;
            label?: string;
            options?: string[];
            pos?: number[];
            layer?: number;
        }): Dropdown {
            const message = new Dropdown({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.options != null) {
                message.options = data.options;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            if (data.layer != null) {
                message.layer = data.layer;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: number;
                label?: string;
                options?: string[];
                pos?: number[];
                layer?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.options != null) {
                data.options = this.options;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            if (this.layer != null) {
                data.layer = this.layer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key != 0)
                writer.writeInt32(1, this.key);
            if (this.label.length)
                writer.writeString(2, this.label);
            if (this.options.length)
                writer.writeRepeatedString(3, this.options);
            if (this.pos.length)
                writer.writePackedInt32(4, this.pos);
            if (this.layer != 0)
                writer.writeInt32(5, this.layer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Dropdown {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Dropdown();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readInt32();
                        break;
                    case 2:
                        message.label = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.pos = reader.readPackedInt32();
                        break;
                    case 5:
                        message.layer = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Dropdown {
            return Dropdown.deserialize(bytes);
        }
    }
}
