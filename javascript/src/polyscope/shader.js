"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groundPlaneFragmentShader = exports.groundPlaneVertexShader = void 0;
exports.groundPlaneVertexShader = "\n  uniform mat4 textureMatrix;\n  attribute vec2 texture_uv;\n\n  varying vec4 vUv;\n  varying vec2 TextureUV;\n\n  void main() {\n    vUv = textureMatrix * vec4(position, 1.0);\n    TextureUV = texture_uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n";
exports.groundPlaneFragmentShader = "\n  uniform vec3 color;\n  uniform sampler2D tDiffuse;\n  uniform sampler2D tex;\n  uniform float alpha;\n\n  varying vec2 TextureUV;\n  varying vec4 vUv;\n\n  float blendOverlay(float base, float blend) {\n    return (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)));\n  }\n\n  vec3 blendOverlay(vec3 base, vec3 blend) {\n    return vec3(blendOverlay(base.r, blend.r), blendOverlay(base.g, blend.g), blendOverlay(base.b, blend.b));\n  }\n\n  float onGrid(vec2 coord2D) {\n    float modDist = min(min(mod(coord2D.x, 1.0), mod(coord2D.y, 1.0)), min(mod(-coord2D.x, 1.0), mod(-coord2D.y, 1.0)));\n    return 1.0 - smoothstep(0.005, 0.02, modDist);\n  }\n\n  void main() {\n    vec4 mat = vec4(texture2D(tex, 9.0 * TextureUV).rgb * 0.55 + 0.45, 1.0);\n    vec4 base = texture2DProj(tDiffuse, vUv);\n    float t = onGrid(26.0 * TextureUV);\n    gl_FragColor = (1.0 - t) * ((1.0 - alpha) * vec4(blendOverlay(base.rgb, color), 1.0) + alpha * mat) + t * vec4(0.3, 0.3, 0.3, 1.0);\n  }\n";
